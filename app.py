import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler
import pickle
import base64
from io import BytesIO

# Sayfa yapÄ±landÄ±rmasÄ±
st.set_page_config(
    page_title="Iris TÃ¼rleri SÄ±nÄ±flandÄ±rmasÄ±",
    page_icon="ğŸŒ¸",
    layout="wide"
)

# BaÅŸlÄ±k ve aÃ§Ä±klama
st.title('Iris TÃ¼rleri SÄ±nÄ±flandÄ±rmasÄ±')
st.markdown("""
Bu uygulama, makine Ã¶ÄŸrenimi kullanarak Iris Ã§iÃ§ek tÃ¼rlerinin sÄ±nÄ±flandÄ±rÄ±lmasÄ±nÄ± gÃ¶sterir.
SVM algoritmasÄ± kullanÄ±larak, Ã§iÃ§ek Ã¶zellikleri (taÃ§ yaprak ve Ã§anak yaprak Ã¶lÃ§Ã¼leri) Ã¼zerinden sÄ±nÄ±flandÄ±rma yapÄ±lÄ±r.
""")

# Sidebar
st.sidebar.header('Uygulama MenÃ¼sÃ¼')
page = st.sidebar.radio('Sayfa SeÃ§in:', 
    ['Ana Sayfa', 'Veri KeÅŸfi', 'Model EÄŸitimi', 'Tahmin'])

# Veri yÃ¼kleme fonksiyonu
@st.cache_data
def load_data():
    iris = load_iris()
    X = iris.data
    y = iris.target
    feature_names = iris.feature_names
    target_names = iris.target_names
    
    # DataFrame oluÅŸtur
    df = pd.DataFrame(X, columns=feature_names)
    df['species'] = [target_names[i] for i in y]
    df['target'] = y
    
    return df, X, y, feature_names, target_names

# GrafiÄŸi indirilebilir hale getiren yardÄ±mcÄ± fonksiyon
def get_image_download_link(fig, filename, text):
    buf = BytesIO()
    fig.savefig(buf, format='png')
    buf.seek(0)
    b64 = base64.b64encode(buf.read()).decode()
    href = f'<a href="data:image/png;base64,{b64}" download="{filename}">{text}</a>'
    return href

# Veriyi yÃ¼kle
df, X, y, feature_names, target_names = load_data()

# Model eÄŸitimi fonksiyonu
@st.cache_resource
def train_model(X, y, optimize=False):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    if optimize:
        param_grid = {
            'C': [0.1, 1, 10],
            'kernel': ['linear', 'rbf'],
            'gamma': ['scale', 'auto']
        }
        from sklearn.model_selection import GridSearchCV
        grid_search = GridSearchCV(SVC(probability=True), param_grid, cv=5, scoring='accuracy')
        grid_search.fit(X_train, y_train)
        model = grid_search.best_estimator_
        best_params = grid_search.best_params_
    else:
        model = SVC(probability=True)
        model.fit(X_train, y_train)
        best_params = None
        
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred, output_dict=True)
    
    return model, X_train, X_test, y_train, y_test, y_pred, accuracy, report, best_params

# Ana Sayfa
if page == 'Ana Sayfa':
    st.header('Iris Veri Seti HakkÄ±nda')
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("""
        **Iris Veri Seti**, makine Ã¶ÄŸrenimi alanÄ±nda en Ã§ok bilinen veri setlerinden biridir. ÃœÃ§ farklÄ± Iris tÃ¼rÃ¼nÃ¼n (Setosa, Versicolor ve Virginica) dÃ¶rt farklÄ± Ã¶zelliÄŸini iÃ§erir:
        
        1. Ã‡anak yaprak uzunluÄŸu (sepal length)
        2. Ã‡anak yaprak geniÅŸliÄŸi (sepal width)
        3. TaÃ§ yaprak uzunluÄŸu (petal length)
        4. TaÃ§ yaprak geniÅŸliÄŸi (petal width)
        
        Bu uygulama, Destek VektÃ¶r Makineleri (SVM) kullanarak bu Ã¼Ã§ farklÄ± Iris tÃ¼rÃ¼nÃ¼ sÄ±nÄ±flandÄ±rmayÄ± gÃ¶stermektedir.
        """)
    
    with col2:
        st.markdown("### Ã–rnek Iris TÃ¼rleri")
        st.image("https://raw.githubusercontent.com/scikit-learn/scikit-learn/main/doc/images/iris.png", 
                caption="Iris Setosa, Iris Versicolor, Iris Virginica", use_column_width=True)
    
    st.markdown("### Veri Seti Ã–zeti")
    st.write(df.describe())
    
    # Veri setinde kaÃ§ Ã¶rnek var?
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Toplam Ã–rnek SayÄ±sÄ±", df.shape[0])
    with col2:
        st.metric("Ã–zellik SayÄ±sÄ±", len(feature_names))
    with col3:
        st.metric("SÄ±nÄ±f SayÄ±sÄ±", len(target_names))
    
    # Her tÃ¼rden kaÃ§ Ã¶rnek var?
    st.markdown("### SÄ±nÄ±f DaÄŸÄ±lÄ±mÄ±")
    fig, ax = plt.subplots(figsize=(8, 4))
    df['species'].value_counts().plot(kind='bar', ax=ax)
    plt.title('Iris TÃ¼rlerinin DaÄŸÄ±lÄ±mÄ±')
    plt.ylabel('Ã–rnek SayÄ±sÄ±')
    plt.xticks(rotation=0)
    st.pyplot(fig)

# Veri KeÅŸfi
elif page == 'Veri KeÅŸfi':
    st.header('Veri KeÅŸfi ve GÃ¶rselleÅŸtirme')
    
    viz_type = st.selectbox(
        'GÃ¶rselleÅŸtirme TÃ¼rÃ¼:',
        ['Pairplot', 'Violin Plot', 'PCA', 't-SNE 3D', 'Parallel Coordinates']
    )
    
    if viz_type == 'Pairplot':
        st.subheader('Pairplot: TÃ¼m Ã–zellikler ArasÄ± Ä°liÅŸkiler')
        fig = sns.pairplot(df, hue='species', palette='viridis')
        st.pyplot(fig)
        
    elif viz_type == 'Violin Plot':
        st.subheader('Violin Plot')
        feature = st.selectbox('Ã–zellik SeÃ§in:', feature_names)
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.violinplot(x='species', y=feature, data=df, palette='viridis', ax=ax)
        plt.title(f'{feature} by Species')
        st.pyplot(fig)
        
    elif viz_type == 'PCA':
        st.subheader('PCA: 2 Boyuta Ä°ndirgeme')
        pca = PCA(n_components=2)
        X_pca = pca.fit_transform(X)
        
        pca_df = pd.DataFrame({'PC1': X_pca[:, 0], 'PC2': X_pca[:, 1], 'species': df['species']})
        
        fig = px.scatter(pca_df, x='PC1', y='PC2', color='species', 
                         title='2D PCA: Iris TÃ¼rleri', 
                         color_discrete_sequence=px.colors.qualitative.Vivid)
        fig.update_layout(width=700, height=500)
        st.plotly_chart(fig)
        
        # PCA aÃ§Ä±klanan varyans oranÄ±
        explained_variance = pca.explained_variance_ratio_
        st.write(f"PC1 aÃ§Ä±klanan varyans: {explained_variance[0]:.2f}")
        st.write(f"PC2 aÃ§Ä±klanan varyans: {explained_variance[1]:.2f}")
        st.write(f"Toplam aÃ§Ä±klanan varyans: {sum(explained_variance):.2f}")
        
    elif viz_type == 't-SNE 3D':
        st.subheader('t-SNE: 3 Boyutlu GÃ¶rselleÅŸtirme')
        
        # t-SNE parametrelerini ayarlama seÃ§eneÄŸi
        perplexity = st.slider('Perplexity:', min_value=5, max_value=50, value=30)
        
        # t-SNE uygula
        tsne = TSNE(n_components=3, random_state=42, perplexity=perplexity)
        X_tsne = tsne.fit_transform(X)
        
        # 3D gÃ¶rselleÅŸtirme
        fig = px.scatter_3d(
            x=X_tsne[:,0], y=X_tsne[:,1], z=X_tsne[:,2],
            color=df['species'],
            labels={'color': 'TÃ¼r'},
            title='3B t-SNE: Iris TÃ¼rleri',
            color_discrete_sequence=px.colors.qualitative.Vivid
        )
        fig.update_traces(marker_size=5)
        fig.update_layout(width=800, height=600)
        st.plotly_chart(fig)
        
    elif viz_type == 'Parallel Coordinates':
        st.subheader('Paralel Koordinatlar')
        # Paralel koordinatlar gÃ¶rselleÅŸtirmesi iÃ§in plotly kullan
        fig = px.parallel_coordinates(
            df, 
            color="species",
            dimensions=feature_names,
            color_continuous_scale=px.colors.diverging.Tealrose,
            color_continuous_midpoint=1
        )
        fig.update_layout(width=900, height=600)
        st.plotly_chart(fig)

# Model EÄŸitimi
elif page == 'Model EÄŸitimi':
    st.header('SVM Model EÄŸitimi ve DeÄŸerlendirme')
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        optimize = st.checkbox('Grid Search ile Hiperparametre Optimizasyonu', value=False)
        if optimize:
            st.info('Hiperparametre optimizasyonu biraz zaman alabilir.')
    
    with col2:
        scale_data = st.checkbox('Verileri Ã–lÃ§eklendir', value=True)
        if scale_data:
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X)
            data_to_use = X_scaled
            st.info('Veriler Ã¶lÃ§eklendirildi.')
        else:
            data_to_use = X
    
    if st.button('Modeli EÄŸit'):
        with st.spinner('Model eÄŸitiliyor...'):
            model, X_train, X_test, y_train, y_test, y_pred, accuracy, report, best_params = train_model(data_to_use, y, optimize)
            
            st.success(f'Model eÄŸitimi tamamlandÄ±! DoÄŸruluk: {accuracy:.4f}')
            
            if optimize and best_params:
                st.subheader('En Ä°yi Hiperparametreler')
                st.json(best_params)
            
            # SÄ±nÄ±flandÄ±rma raporu
            st.subheader('SÄ±nÄ±flandÄ±rma Raporu')
            report_df = pd.DataFrame(report).transpose()
            st.write(report_df)
            
            # KarÄ±ÅŸÄ±klÄ±k matrisi
            st.subheader('KarÄ±ÅŸÄ±klÄ±k Matrisi')
            from sklearn.metrics import confusion_matrix
            cm = confusion_matrix(y_test, y_pred)
            fig, ax = plt.subplots(figsize=(8, 6))
            sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', 
                        xticklabels=target_names, yticklabels=target_names)
            plt.xlabel('Tahmin Edilen')
            plt.ylabel('GerÃ§ek')
            plt.title('KarÄ±ÅŸÄ±klÄ±k Matrisi')
            st.pyplot(fig)
            
            # Model dosyasÄ±nÄ± kaydet
            model_data = {
                'model': model,
                'scaler': scaler if scale_data else None,
                'feature_names': feature_names,
                'target_names': target_names,
                'scale_data': scale_data
            }
            
            # Model indirme baÄŸlantÄ±sÄ±
            pickle_buffer = BytesIO()
            pickle.dump(model_data, pickle_buffer)
            pickle_buffer.seek(0)
            
            st.download_button(
                label="Modeli Ä°ndir (pickle)",
                data=pickle_buffer,
                file_name="iris_svm_model.pkl",
                mime="application/octet-stream"
            )

# Tahmin
elif page == 'Tahmin':
    st.header('Yeni Veri ile Tahmin')
    
    # Ã–rnek veriler
    if st.checkbox('Ã–rnek veriler kullan'):
        sample_idx = st.selectbox('Ã–rnek seÃ§in:', range(len(X)))
        sepal_length = X[sample_idx, 0]
        sepal_width = X[sample_idx, 1]
        petal_length = X[sample_idx, 2]
        petal_width = X[sample_idx, 3]
        
        st.info(f"GerÃ§ek tÃ¼r: {target_names[y[sample_idx]]}")
    else:
        # KullanÄ±cÄ± girdisi
        col1, col2 = st.columns(2)
        with col1:
            sepal_length = st.slider('Ã‡anak yaprak uzunluÄŸu (cm):', 4.0, 8.0, 5.8, 0.1)
            sepal_width = st.slider('Ã‡anak yaprak geniÅŸliÄŸi (cm):', 2.0, 4.5, 3.0, 0.1)
        with col2:
            petal_length = st.slider('TaÃ§ yaprak uzunluÄŸu (cm):', 1.0, 7.0, 4.0, 0.1)
            petal_width = st.slider('TaÃ§ yaprak geniÅŸliÄŸi (cm):', 0.1, 2.5, 1.3, 0.1)
    
    # Ã–zellik deÄŸerlerini gÃ¶ster
    input_data = np.array([[sepal_length, sepal_width, petal_length, petal_width]])
    
    st.markdown('### Girilen Ã–zellikler')
    input_df = pd.DataFrame({
        'Ã–zellik': feature_names,
        'DeÄŸer': input_data[0]
    })
    st.write(input_df)
    
    # Tahmin yap
    if st.button('Tahmin Et'):
        # Model eÄŸitimi
        use_scaling = st.checkbox('Verileri Ã–lÃ§eklendir', value=True)
        
        with st.spinner('Tahmin yapÄ±lÄ±yor...'):
            # Model eÄŸitimi
            model, _, _, _, _, _, _, _, _ = train_model(X, y, optimize=False)
            
            # Veri Ã¶lÃ§eklendirme
            if use_scaling:
                scaler = StandardScaler()
                scaler.fit(X)
                input_data_scaled = scaler.transform(input_data)
                prediction = model.predict(input_data_scaled)
            else:
                prediction = model.predict(input_data)
            
            # Tahmin sonucu
            pred_class = target_names[prediction[0]]
            
            # OlasÄ±lÄ±klar (SVC iÃ§in probability=True ayarlanmalÄ±)
            probs = model.predict_proba(input_data_scaled if use_scaling else input_data)[0]
            
            # SonuÃ§larÄ± gÃ¶ster
            st.success(f'Tahmin Edilen TÃ¼r: **{pred_class}**')
            
            # OlasÄ±lÄ±k Ã§ubuÄŸu
            prob_df = pd.DataFrame({
                'TÃ¼r': target_names,
                'OlasÄ±lÄ±k': probs
            })
            
            fig = px.bar(prob_df, x='TÃ¼r', y='OlasÄ±lÄ±k', color='TÃ¼r',
                        color_discrete_sequence=px.colors.qualitative.Vivid,
                        title='SÄ±nÄ±f OlasÄ±lÄ±klarÄ±')
            fig.update_layout(xaxis_title='Iris TÃ¼rÃ¼', yaxis_title='OlasÄ±lÄ±k')
            st.plotly_chart(fig)
            
            # Bu tahminin konumu (PCA ile)
            st.subheader('Bu Ã–rneÄŸin PCA UzayÄ±ndaki Konumu')
            
            # Original veri ile yeni veriyi birleÅŸtir
            combined_data = np.vstack([X, input_data])
            
            # PCA uygula
            pca = PCA(n_components=2)
            combined_pca = pca.fit_transform(combined_data)
            
            # Ä°lk 150 nokta orijinal veri, son nokta yeni giriÅŸ
            X_pca = combined_pca[:-1]
            new_point_pca = combined_pca[-1]
            
            # GÃ¶rselleÅŸtirme
            fig, ax = plt.subplots(figsize=(10, 6))
            scatter = ax.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='viridis', alpha=0.6, label='EÄŸitim verileri')
            ax.scatter(new_point_pca[0], new_point_pca[1], color='red', s=100, edgecolor='k', marker='*', label='Yeni veri')
            ax.set_title('PCA: Yeni Verinin Konumu')
            ax.set_xlabel('Birinci Temel BileÅŸen')
            ax.set_ylabel('Ä°kinci Temel BileÅŸen')
            plt.legend()
            
            # Colorbar ekle
            legend1 = ax.legend(*scatter.legend_elements(),
                              loc="upper right", title="SÄ±nÄ±flar")
            ax.add_artist(legend1)
            
            st.pyplot(fig)
            
# Footer
st.markdown('---')
st.markdown('Iris TÃ¼rleri SÄ±nÄ±flandÄ±rma UygulamasÄ± - Made with Streamlit')
